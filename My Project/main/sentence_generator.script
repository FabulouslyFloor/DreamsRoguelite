function init(self)
	schoolRooms = {}
	schoolRooms[1] = "R"
	schoolRooms[2] = "G"
	schoolRooms[3] = "C"
	schoolRooms[4] = "B"
	-- creates list of valid room types for school generation

	contentOps = {}
	contentOps[1] = {}
	contentOps[1][1] = "Room"
	contentOps[1][2] = "Room"
	contentOps[1][3] = "[CONTENT]"
	contentOps[2] = {}
	contentOps[2][1] = "Room"
	contentOps[2][2] = "Room"
	contentOps[3] = {}
	contentOps[3][1] = "Room"
	contentOps[4] = {}
	contentOps[4][1] = "Room"
	contentOps[4][2] = "[CONTENT]"
	contentOps[5] = {}
	contentOps[5][1] = "[CONTENT]"
	contentOps[5][2] = "[CONTENT]"
	-- creates array of valid parts of sentences for grammar
	-- looks like: ((Room, Room, [CONTENT]), (Room, Room), (Room), (Room, [CONTENT]), ([CONTENT], [CONTENT])
	
	createSentence(self, "School")
	createSentence(self, "Outside")
	createSentence(self, "Basement")
	-- runs createSentence for each kind of area
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function createSentence(self, space)
	math.randomseed(os.time())
	-- sets random object to current time
	sentence = {}
	sentence[1] = "Spawn"
	sentence[2] = "[CONTENT]"
	sentence[3] = "[CONTENT]"
	sentence[4] = "[CONTENT]"
	sentence[5] = "Boss"
	sentence[6] = "[CONTENT]"
	sentence[7] = "[CONTENT]"
	sentence[8] = "End"
	-- creates starting sentence to be used by rest of program
	-- looks like: Spawn, [CONTENT], [CONTENT], [CONTENT], Boss, [CONTENT], [CONTENT], End
	
	needUpdates = true
	-- boolean to track if the sentence has replacable strings

	while needUpdates do
		size = #sentence
		-- set size value to length of sentence (ie, len(String))
		needUpdates = false
		-- set needUpdates to false, so that if no update is found, while loop ends

		for i=1, size do
			-- if [CONTENT] found, replace with a random selection from contentOps
			-- set needUpdates to true in this case because there will be new Rooms or [CONTENT]s to replace
			if sentence[i] == "[CONTENT]" then
				val = math.random(1, #contentOps)
				for j=1, #contentOps[val] do
					if j == 1 then
						sentence[i] = contentOps[val][j]
					else
						table.insert(sentence, i, contentOps[val][j])
					end
				end
				needUpdates = true
				-- if Room found, replace with appropriate character for area; 
				-- if area is school, select random room type from schoolRooms
			elseif sentence[i] == "Room" then
				if space == "Outside" then
					sentence[i] = "O"
				elseif space == "Basement" then
					sentence[i] = "B"
				elseif space == "School" then
					val = math.random(1, #schoolRooms)
					sentence[i] = schoolRooms[val]
				end
			end
		end
	end

	-- limits sentence length to 48 to ensure it fits in current mapspace
	minPostBoss = 3
	-- can alter this value later if we want more guaranteed tiles after boss to end of sentence. 
	-- currently 3 guaranteed, one of which is end room
	while #sentence > 48 do
		-- if the Boss room is third from last in sentence, start removing rooms from before the Boss room instead of after
		if sentence[#sentence-minPostBoss] == "Boss" then
			table.remove(sentence, #sentence-(minPostBoss+1))
		else
			-- remove the last room that is NOT the end room (tables are 1-indexed in lua)
			table.remove(sentence, #sentence-1)
		end
	end
	
	finalSentence = table.concat(sentence, " ")
	-- convert table to string
	print(finalSentence)
	-- print statement for testing

end