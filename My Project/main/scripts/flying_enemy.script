function init(self)
	math.randomseed(os.time())
	self.max_speed = 250
	self.current_dir = vmath.vector3(0,0,0)
	self.dir_change_timer = 20
	self.tracking = false
	self.current_anim = "left"
	self.track_table = {}
	for i = 1,8 do
		self.track_table[i] = false
	end
	self.track_numerator = 0
	change_dir(self)
end

function update(self, dt)
	local pos = go.get_position()
	if self.tracking == false then
		pos = pos + (self.current_dir * self.max_speed / 5 * dt)
		go.set_position(pos)
		self.dir_change_timer = self.dir_change_timer - 1
		if self.dir_change_timer == 0 then
			change_dir(self)
		end
	else
		dir_go = track_player(self)
		pos = pos + (dir_go * self.max_speed * dt)
		go.set_position(pos)
	end
end

function change_dir(self)
	valid_num = false
	while not valid_num do
		number = math.random(1, 8) -- 1 ^ 2 ^> 3 > 4>v 5v 6<v 7< 8<^
		if self.track_table[number] == false then
			self.track_table[number] = true
			valid_num = true
			self.track_numerator = self.track_numerator + 1
		end
	end

	if self.track_numerator == 8 then
		for i = 1,8 do
			self.track_table[i] = false
		end
		self.track_numerator = 0
	end

	self.current_dir = vmath.vector3(0,0,0)
		
	if number == 1 or number == 2 or number == 8 then
		self.current_dir.y = 1
	elseif number == 4 or number == 5 or number == 6 then
		self.current_dir.y = -1
	end
	
	if number == 2 or number == 3 or number == 4 then
		self.current_dir.x = 1
	elseif number == 6 or number == 7 or number == 8 then
		self.current_dir.x = -1
	end
	
	if self.current_dir.x == 1 and self.current_anim ~= "right" then
		self.current_anim = "right"
		sprite.play_flipbook("#sprite", "right")
	end
	
	if self.current_dir.x == -1 and self.current_anim ~= "left" then
		self.current_anim = "left"
		sprite.play_flipbook("#sprite", "left")
	end

	if vmath.length(self.current_dir) > 1 then
		self.current_dir = vmath.normalize(self.current_dir)
	end
	
	self.dir_change_timer = 60
end

-- todo: add attack animation for when hurts player
function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") and message.other_group == hash("player") then
		track_player(self)
		self.tracking = true
	end
end

function track_player(self)
	target_location = go.get_position("Level:/Player#player")
	my_location = go.get_position()
	diff_location = target_location-my_location
	-- normalize value
	if vmath.length_sqr(diff_location) > 1 then
		diff_location = vmath.normalize(diff_location)
	end
	return diff_location
end
