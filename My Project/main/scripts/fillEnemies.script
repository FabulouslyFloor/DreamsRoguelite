--[[
Script Name: fillEnemies
Author(s): Matthew DeGirolamo
Date of Last Change: 5/6/2024

Scripts Referenced/Messaged: mapCreator

Script Purpose: places enemies onto the map
]]

--constants that represent the width and length of each room in tile size
WIDTH = 39
LENGTH = 39

--when placing assets on the tilemap, their locations are specified by pixel rather than tile
--this causes a lot of issues, and these variables are the approximate pixel size of the assets
local assetOffsetX = 35
local assetOffsetY = 32

--places enemies onto the outside section of the map
function init(self)
	--there is a known problem in defold with the math.random library: based on
	--how it generates random numbers with certain computers, it somtimes is stuck
	--generating the same random numbers within the same loop
	--this is a known bug for this script, where on certain machines, each room
	--spawns with the same set of enemies
	--for more information on this problem, please see: https://forum.defold.com/t/lua-math-random-problem/19372/17
	--unfortunately, I did not have time to implement a new random number generator solution this semester,
	--so the problem persists in our project in certain situations
	math.randomseed(os.time())

	--creates a slide boss and places it in the outside map section
	factory.create("/enemy_spawner#slidefactory", vmath.vector3(6000, 8000, 0.00000001), nil, nil, 0.8)

	--for the tiles that consist of the outside map section (this is a fixed range
	--on the tilemap), place enemies
	for k = 30, 200 do
		for n = 240, 254 do

			--there is a 1 in 100 chance that a tree and enemy spawn per tile
			enemy_chance = math.random(1,100)
			tree_chance = math.random(1,100)

			--if the enemy chance hits, and the tile coordinates are not
			--too close to the player's spawn location, choose an enemy to spawn
			if enemy_chance == 100 and (k >= 90 or k<=60) then
				local enemy = math.random(1,3)
				if enemy == 1 then
					factory.create("/enemy_spawner#gremlin_factory", vmath.vector3(k*assetOffsetX, n*assetOffsetY, 0.00000001), nil, nil, 2)
				elseif enemy == 2 then
					factory.create("/enemy_spawner#worm_factory", vmath.vector3((k*assetOffsetX)+100, (n*assetOffsetY)+300, 0.00000001), nil, nil, .3)
				else
					factory.create("/enemy_spawner#bee_factory", vmath.vector3(k*assetOffsetX, n*assetOffsetY, 0.00000001), nil, nil, .1)
				end
			end

			--if the tree chance hits, place a tree
			if tree_chance == 100 then
				factory.create("/mapAssets#tree_factory", vmath.vector3(k*assetOffsetX, n*assetOffsetY, 0.99), nil, nil, 1)
			end
		end
	end
end

--once the mapCreator is done painting the tilemap, enemies can now be spawned onto it
function on_message(self, message_id, message, sender)

	--requires the cellular automata grid to know which locations require enemies
	local grid = message

	--for each non-empty room on the grid, place some enemies
	for i = 1, #grid do
		for j = 1, #grid[1] do
			local room = grid[i][j]
			if room ~= '' then

				--pixel locations for enemy placement based off room coordinates
				--and pixel offsets
				pixelLocX = ((((j - 1) * WIDTH)+1) * assetOffsetX)
				pixelLocY = ((((i - 1) * LENGTH)+1) * assetOffsetY)

				--random enemy spawning
				local chance = math.random(2,5)
				for i = 1, chance do
					local enemy = math.random(1,3)
					if enemy == 1 then
						factory.create("/enemy_spawner#gremlin_factory", vmath.vector3(pixelLocX, pixelLocY, 0.00000001), nil, nil, 2)
					elseif enemy == 2 then
						factory.create("/enemy_spawner#worm_factory", vmath.vector3(pixelLocX+100, pixelLocY+300, 0.00000001), nil, nil, .3)
					else
						factory.create("/enemy_spawner#bee_factory", vmath.vector3(pixelLocX, pixelLocY, 0.00000001), nil, nil, .1)
					end
				end
			end
		end
	end
end