WIDTH = 39
LENGTH = 39

function init(self)
	math.randomseed(os.time())
	for r = -10, WIDTH*6.5 do
		for c = -10, LENGTH*7 do
			local pool = {11,11,11,12,12,12,13,13,13,14,14,14,15,16,17,17,17}
			local tile = pool[math.random(#pool)]
			tilemap.set_tile("/level#generateMap", "background", r, c, tile)
		end
	end
--[[
	tilemap.set_tile("/level#generateMap", "roof2", 98, 233, 6)
	tilemap.set_tile("/level#generateMap", "roof2", 98, 234, 7)
	tilemap.set_tile("/level#generateMap", "roof2", 97, 233, 6)
	tilemap.set_tile("/level#generateMap", "roof2", 97, 234, 7)
	tilemap.set_tile("/level#generateMap", "roof2", 99, 233, 6)
	tilemap.set_tile("/level#generateMap", "roof2", 99, 234, 7)
	--]]
end

function on_message(self, message_id, message, sender)

	local grid = message

	for i = 1, #grid do
		for j = 1, #grid[1] do
			local room = grid[i][j]
			if room ~= '' then
				
				correctionX = 0
				correctionY = 0
				if i > 2 then
					correctionX = 35
				else
					correctionX = 45
				end

				if j > 2 then
					correctionY = 35
				else
					correctionY = 50
				end
				
				temp_x = ((((i - 1) * WIDTH)+1) * correctionX)
				temp_y = ((((j - 1) * LENGTH)+1) * correctionY)

				local chance = Mrandom(2,5)
				for i = 1, chance do
					local enemy = Mrandom(1,3)
					if enemy == 1 then
						factory.create("/enemy_spawner#gremlin_factory", vmath.vector3(temp_y, temp_x, 0.00000001), nil, nil, 2)
					elseif enemy == 2 then
						factory.create("/enemy_spawner#worm_factory", vmath.vector3(temp_y+100, temp_x+300, 0.00000001), nil, nil, .3)
					else
						factory.create("/enemy_spawner#bee_factory", vmath.vector3(temp_y, temp_x, 0.00000001), nil, nil, .1)
					end
				end
			end
		end
	end
end

-- Based on: 
-- MT19937: 32-bit Mersenne Twister by Matsumoto and Nishimura, 1998
-- http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf
-- https://en.wikipedia.org/wiki/Mersenne_Twister
-- This work is licensed under the Creative Commons Attribution 4.0 International License. 
-- To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.
-- Author: Mr Doomah - with slight modifications

local M = {}


local w, n, m, r = 32, 624, 397, 31
local a = 0x9908B0DF
local u = 11
local s, b = 7, 0x9D2C5680
local t, c = 15, 0xEFC60000
local l = 18
local f = 1812433253

-- Assign functions
local bnot = bit.bnot
local bxor = bit.bxor
local band = bit.band
local bor = bit.bor
local rshift = bit.rshift
local lshift = bit.lshift
local function int32(int) -- 32 bits
	return band(int, 0xFFFFFFFF)
end

-- Create an array to store the state of the generator
local MT = {}
local index = n+1
local lower_mask = lshift(1, r) -1
local upper_mask = int32(bnot(lower_mask))

-- Initialize the generator from a seed
function M.seed_mt(seed)
	index = n
	if not seed then seed = os.time() end
	MT[0] = int32(seed)
	for i = 1, n-1 do
		MT[i] = int32(f * bxor(MT[i-1], rshift(MT[i-1], w-2) + i))
	end
end

-- Extract a tempered value based on MT[index]
-- calling M.twist() every n numbers
function M.extract_number()
	if index >= n then
		if index > n then 
			M.seed_mt()
		end
		M.twist()
	end

	local y = MT[index]
	y = bxor(y, rshift(y, u))
	y = bxor(y, band(lshift(y, s), b))
	y = bxor(y, band(lshift(y, t), c))
	y = bxor(y, rshift(y, l))

	index = index+1
	return int32(y)
end 

-- Generate the next n values from the series x_i 
function M.twist()
	for i = 0, n-1 do
		local x = bor(band(MT[i], upper_mask), band(MT[(i+1) % n], lower_mask))
		local xA = rshift(x, 1)
		if x % 2 ~= 0 then
			xA = bxor(xA, a)
		end
		MT[i] = int32(bxor(MT[(i + m) % n], xA))
	end
	index = 0
end

-- Function to call to get a random number
function Mrandom(p, q)
	if p then
		if q then
			return p + M.extract_number() % (q - p + 1)
		else
			return 1 + M.extract_number() % p
		end
	else
		return M.extract_number() / 0xFFFFFFFF
	end
end

return M