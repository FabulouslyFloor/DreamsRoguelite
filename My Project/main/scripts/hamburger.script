--[[
Script Name: hamburger.script
Author(s): Florian Hurlbert
Date of Last Change: 05/06/2024

Scripts Referenced/Messaged:

Script Purpose: This script controls the projectiles spawned by the chef. It keeps track of two different types of movement
and spawns them based on passed information. It also handles what they do upon death.
]]

-- Sets up internal variables which will get filled when the factory call is made.
go.property("track", false)
go.property("id", 0)

--[[
Function init
Init is native to defold and executes it's code whenever an instance is first loaded.
It takes in the self object to access the internal variables of the specific instance it is controlling.
This function sets up all the variables needed for the hamburger to execute.
]]
function init(self)
	self.speed = 150
end

--[[
Function update
Update is native to defold and executes it's code every frame.
It takes in the self object to access the internal variables of the specific instance it is controlling. dt is the current frame.
This function handles the movement of the projectiles.
	It divdes it up between two different types of projectiles and moves them based on that.
]]
function update(self, dt)
	-- If it was spawned with tracking enabled
	if self.track then
		-- The enemy compares it's position to that of the player 
		local current_position = go.get_position()
		-- Calculates the different between the players position and their position in a vector
		local diff = go.get_position("/Player") - current_position
		-- Determines the length of the difference
		local distance_to_target = vmath.length(diff)
		-- If the enemy has not reached the player
		if distance_to_target > 0 then
			-- Normalizes the direction
			local direction = vmath.normalize(diff)
			-- don't overshoot the target by moving too far in a frame
			local distance_to_move = math.min(distance_to_target, self.speed * dt)
			-- update with the new position
			local new_position = current_position + direction * distance_to_move
			go.set_position(new_position)
		end
	-- If the projectile is not tracking
	else
		local pos = go.get_position()
		if self.id == 1 then
			pos.x = pos.x + 2
			pos.y = pos.y - 3
		elseif self.id == 2 then
			pos.x = pos.x + 1
			pos.y = pos.y - 3
		elseif self.id == 3 then
			pos.x = pos.x + 0
			pos.y = pos.y - 3
		elseif self.id == 4 then
			pos.x = pos.x - 1
			pos.y = pos.y - 3
		elseif self.id == 5 then
			pos.x = pos.x - 2
			pos.y = pos.y - 2
		end
		go.set_position(pos)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") and message.other_group == hash("rockets") or message.other_group == hash("up") or message.other_group == hash("down") or message.other_group == hash("right") or message.other_group == hash("left") or message.other_group == hash("player") then
		if self.id == 0 then
			msg.post("/chefBoss#chef_boss", "burger_death")
		end
		go.delete()
	elseif message_id == hash("contact_point_response") and (message.other_group == hash("walls") or message.other_group == hash("enemy_walls")) then
		go.delete()
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
