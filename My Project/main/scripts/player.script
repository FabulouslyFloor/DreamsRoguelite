--[[
Script Name: player
Author(s): Henry Hauger, Florian Hurlbert, Summer Whitley
Date of Last Change: 5/6/2024

Scripts Referenced/Messaged: GUI, weapon factory, rocket factory

Script Purpose: runs the player and their motion, attacks, and damage logic
]]

-- Local Variables Initialized
local speed = 300
local attacking = false
-- Animation Variable
local anim = nil
-- Melee attack flag
local weaponAcquired = false
local attackMelee = true
local meleeWeaponAcquired = false
local rangedWeaponAcquired = false
-- Timers
local weaponSwitchTimer = 0
local attackingTimer = 0

local roofVisible = true
local exitDoorsVisible = true

local function on_victory(self)
	msg.post("mapGeneration:/guis#victory_screen", "victory!")
	go.delete()
end


--[[
Function on_death
It takes in the self object to access the internal variables of the specific instance it is controlling.

	]]
local function on_death(self)
	-- removes control from player
	msg.post("mapGeneration:/guis#death_screen", "dead!")
	msg.post(".", "release_input_focus")
	print("you died!")
	go.delete()
end

-- happens when player collides with an object with group 'enemy_body' (todo: if enemies hit in ways other than melee, add group 'enemy_attack')
--[[
Function on_damage 
It takes in the self object to access the internal variables of the specific instance it is controlling. It takes 
given_normal for the vector of the direction that the player got hit. The trigger variable tracks what type of collission
happened.
This function handles the player taking damage, when there is a collision with "enemy_body"
	It plays a hurt sound, accesses the internal variables to subtract health and either call the death function or set up 
	knockback.
	]]
local function on_damage(self, given_normal,trigger)
	-- play damage sound effect
	sound.play("#on_hurt")
	-- take away 1 hp
	self.health = self.health - 1
	-- send message to gui to remove heart, activate damage cooldown
	msg.post("mapGeneration:/health_gui#player_health", "lost_health")
	-- if  hp at 0, kill player
	if self.health == 0 then
		-- Calls the death function
		on_death(self)
	else
		-- 
		self.damaged = true
		-- Sets the immunity cooldown
		self.damage_cooldown = 120
		-- If the collision was not of type trigger (awkward due to how it was coded)
		if trigger then
			self.knocked_back = true
			self.dir = given_normal
			self.knockback_cooldown = 60
		end
	end
end

--[[
Function init
Init is native to defold and executes it's code whenever an instance is first loaded.
It takes in the self object to access the internal variables of the specific instance it is controlling.
This function sets up all the variables needed for the player to function
]]
function init(self)
	-- Acquires input focus to recieve inputs
	msg.post(".", "acquire_input_focus")
	-- Sets up internal variables
	-- The players current direction (recorded as a vector3)
	self.dir = vmath.vector3()
	-- Keeps track of the players current animation
	self.current_anim = nil
	-- Players health is 5
	self.health = 5
	-- Sets up the players damage immunity cooldown
	self.damage_cooldown = 0
	-- Tracks whether the player has been damaged
	self.damaged = false
	-- Tracks whether the player is currently being knockedback
	self.knocked_back = false
	-- Sets up knockback cooldown
	self.knockback_cooldown = 0
	-- ?
	self.current_location = "outside" -- todo: will be used to help determine what walking sound to use
	-- Tracks whether the player is currently near an item
	self.in_item_range = false
	-- Tracks the ID of the last item they were close to
	self.itemNear = hash("")
	-- Initializes the internal value for how many keys the player has found
	self.keys = 0
	-- Tracks the ID of the first key when spawned
	self.key1id = hash("nothing")
	-- Tracks the ID of the second key when spawned
	self.key2id = hash("nothing")
end

--[[
Function update
Update is native to defold and executes it's code every frame.
It takes in the self object to access the internal variables of the specific instance it is controlling. dt is the current frame.
This function handles primarily the players movement
	It checks a lot of internal variables to check whether the player is currently in a damged state, an attacking state, what direction
	they are moving, and what animations they are playing. It moves the player in the proper direction, decrements necessary variables, 
	and plays the walking sound
]]
function update(self, dt)
	-- 
	if self.damage_cooldown > 0 then
		self.damage_cooldown = self.damage_cooldown - 1
	elseif self.damaged == true then
		self.damaged = false
	end

	-- Checks if the direction is greater than one and normalizes it if it is
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end

	-- If the weapon switch timer is not 0 (to stop the weapon from switching every frame)
	if weaponSwitchTimer ~= 0 then
		-- Decrement the timer
		weaponSwitchTimer = weaponSwitchTimer - 1
	end

	-- Checks if attacking to prevent moving while attacking. Also checks the timestep is not 0 (if not paused)
	if not attacking and dt ~= 0 then
		-- Gets position 
		local p = go.get_position()
		-- Sets new position using internal direction
		go.set_position(p + self.dir * speed * dt) 

		-- counts down knockback if it's still going, if timer hits 0 then exit knockback state
		if self.knockback_cooldown > 0 then
			self.knockback_cooldown = self.knockback_cooldown - 1
		elseif self.knocked_back == true then
			self.knocked_back = false
		end

		-- Sets to Idle by default 
		local anim = hash("idle")

		-- TODO: DAMAGED STATE OVERRIDES DIRECTIONS. BY DESIGN AS PLACEHOLDER. 
		if self.damaged == true then
			anim = hash("hit")
		-- Checks the X and Y directions to determine the animation to play - prioritizes X over Y
		elseif self.dir.x > 0 and dt ~= 0 then  
			anim = hash("run_right")
		elseif self.dir.x < 0 and dt ~= 0 then
			anim = hash("run_left")
		elseif self.dir.y > 0 and dt ~= 0 then
			anim = hash("run_up")
		elseif self.dir.y < 0 and dt ~= 0 then
			anim = hash("run_down")
		end

		if self.dir ~= vmath.vector3() and self.current_anim == hash("idle") then -- if the player is about to start moving
			sound.play("#walking") -- play walking noises
		end

		-- If the anim variable doesn't match the internal variable
		if anim ~= self.current_anim then
			-- Sends a message to the sprite component to play the new animation
			msg.post("#sprite", "play_animation", { id = anim })
			-- Sets the internal variable to the new animation
			self.current_anim = anim 
			if anim == hash("idle") then -- used to detect if player is going idle, turns off walking noises
				sound.stop("#walking")
			end
		end

		-- resets movement vector to 0,0,0 unless player is still being knocked back
		if not self.knocked_back then
			self.dir = vmath.vector3() 
		end 

	end
end

--[[
Function on_message
on_message is native to defold and executes it's code whenever the script recieves a message (a defold special feature).
This function handles the player attacking, switching weapon, interacting with objects, colliding with enemies and
	colliding with walls.
]]
function on_message(self, message_id, message, sender)
	-- Checks for attack messages

	if message_id == hash("away") and dt ~= 0 then
		msg.post(".", "release_input_focus")
		msg.post(".", "play_animation", {id = hash("away")})
		local ypos = go.get(".", "position.y") + 1000
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, ypos, go.EASING_INELASTIC, 3, on_victory(self))
	end
	
	-- When it recieves an attack message, has a weapon, and the game is not paused
	if message_id == hash("play attack") and weaponAcquired and dt ~= 0 then
		-- Checks if the player is not already currently attacking or playing the damaged animation
		if not attacking and self.damage_cooldown == 0 then
			-- Saves the animation being played currently
			anim = self.current_anim
			-- If the player is attacking with the Melee weapon and currently has the melee weapon
			if attackMelee and meleeWeaponAcquired then
				-- Sets attacking to true to stop the player from moving during the attack animation
				attacking = true
				-- Checks which direction the player was facing based on animation 
				-- Plays the proper attack animation
				-- Spawns a weapon object with the direction animation which plays the proper animation
				if anim == hash("run_right") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("melee_right")})
					local props = { anim = hash("melee_right_sword") }
					factory.create("#Weaponfactory",nil,nil,props)
				elseif anim == hash("run_left") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("melee_left")})
					local props = { anim = hash("melee_left_sword") }
					factory.create("#Weaponfactory",nil,nil,props)
				elseif anim == hash("run_up") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("melee_up")})
					local props = { anim = hash("melee_up_sword") }
					factory.create("#Weaponfactory",nil,nil,props)
				elseif anim == hash("run_down") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("melee_down")})
					local props = { anim = hash("melee_down_sword") }
					factory.create("#Weaponfactory",nil,nil,props)
				elseif anim == hash("idle") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("melee_down")})
					local props = { anim = hash("melee_down_sword") }
					factory.create("#Weaponfactory",nil,nil,props)
				end
			-- If the player is attacking with a ranged weapon and currently has a ranged weapon
			elseif attackMelee == false and rangedWeaponAcquired then
				-- Sets attacking to true to stop the player from moving during the attack animation
				attacking = true
				-- Checks which direction the player was facing based on animation 
				-- Plays the proper attack animation
				-- Spawns a rocket with the proper direction
				if anim == hash("run_right") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("ranged_right")})
					local props = { dir = hash("right") }
					factory.create("#rocketfactory",nil,nil,props)
				elseif anim == hash("run_left") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("ranged_left")})
					local props = { dir = hash("left") }
					factory.create("#rocketfactory",nil,nil,props)
				elseif anim == hash("run_up") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("ranged_up")})
					local props = { dir = hash("up") }
					factory.create("#rocketfactory",nil,nil,props)
				elseif anim == hash("run_down") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("ranged_down")})
					local props = { dir = hash("down") }
					factory.create("#rocketfactory",nil,nil,props)
				elseif anim == hash("idle") and dt ~= 0 then
					msg.post(".", "play_animation", {id = hash("melee_down")})
					local props = { dir = hash("down") }
					factory.create("#rocketfactory",nil,nil,props)
				end
			end
		end
	end
	-- The "play_animation" message sends an "animation_done" message when it finishes playing
	if message_id == hash("animation_done") then
		-- Attacking set to false so player can move again
		attacking = false
		-- Sets the animation back to what it was when the player attacked
		msg.post("#sprite", "play_animation", { id = anim })
	end
	-- Goes off if the player hits the key to switch weapons
	if message_id == hash("switch") and rangedWeaponAcquired == true then
	
	-- When a message is recieved from the input that the player is switching weapons
	if message_id == hash("switch") then
		-- Checks that the weapon timer is at 0
		if weaponSwitchTimer == 0 then
			-- sets the timer
			weaponSwitchTimer = 100
			-- Changes the attack type boolean
			attackMelee = not attackMelee
		end
	end

	-- if message is an attack collision and the player is not in the cooldown state.
	if message_id == hash("contact_point_response") and self.damage_cooldown == 0 and message.other_group == hash("enemy_body") or message.other_group == hash("enemy_attack") then
		-- Saves the current animation state
		anim = self.current_anim
		-- Calls on damage with trigger sent to true
		on_damage(self, message.normal,true)
	end

	-- If message is a trigger attack collision, the player is not in a cooldown state, and the other group is the enemy body
	if message_id == hash("trigger_response") and self.damage_cooldown == 0 and message.other_group == hash("enemy_body") then
		-- Saves the current animation state
		anim = self.current_anim
		-- Saves the current animation state with trigger set to false
		on_damage(self, message.normal,false)
	end

	-- If the message is a trigger response for entering an item's detection range
	if message_id == hash("trigger_response") and message.enter == true and message.other_group == hash("itemrange") then
		-- Sets to true for the input function
		self.in_item_range = true
		-- Sets itemNear to the id of the item so it knows which item this is
		self.itemNear = message.other_id
	-- If the message is a trigger response for leaving an item's detection range
	elseif message_id == hash("trigger_response") and message.enter == false and message.other_group == hash("itemrange") then
		-- Sets to false
		self.in_item_range = false
		-- Clears item near so there are no misfires.
		self.itemNear = hash("")
	end

	-- Recieves a message that the first key has been spawned
	if message_id == hash("key_1_created") then
		-- Sets the internal variable to the keys id for pick up
		self.key1id = message.key_id
	-- Recieves a message that the second key has been spawned
	elseif message_id == hash("key_2_created") then
		-- Sets the internal variable to the keys id for pick up
		self.key2id = message.key_id
	end

	if message_id == hash("contact_point_response") and message.other_group == hash("walls") then
		if message.distance > 0 then
			-- Calculate correction vector to move player out of the wall
			local correction = message.normal * message.distance
			-- Apply correction to player's position
			go.set_position(go.get_position() + correction)
		end
	end

	if message_id == hash("contact_point_response") and message.other_group == hash("enemy_walls") then
		if self.keys == 0 then
			if message.distance > 0 then
				-- Calculate correction vector to move player out of the wall
				local correction = message.normal * message.distance
				-- Apply correction to player's position
				go.set_position(go.get_position() + correction)
			end
		else
			if roofVisible then
				tilemap.set_visible("/level#generateMap", "roof", false)
				tilemap.set_visible("/level#generateMap", "roof_doors", false)
				roofVisible = false
			end
		end
	end

	if message_id == hash("contact_point_response") and message.other_group == hash("exit_doors") then
		if self.keys < 2 then
			if message.distance > 0 then
				-- Calculate correction vector to move player out of the wall
				local correction = message.normal * message.distance
				-- Apply correction to player's position
				go.set_position(go.get_position() + correction)
			end
		else
			if exitDoorsVisible then
				tilemap.set_visible("/level#generateMap", "locked_doors", false)
				exitDoorsVisible = false
			end
		end
	end
end

--[[
Function on_input 
on_input is native to defold and executes it's code whenever the script recieves input.
This function handles the movement input, attacking input, and interaction input
]]
function on_input(self, action_id, action)
	-- if in knockback state then take no user input
	if not self.knocked_back then
		-- Recieves input as designated in the game file
		-- If it is a movement key, it sets the intenal direction of the player
		if action_id == hash("down") and dt ~= 0 then
			self.dir.y = -1
		elseif action_id == hash("up") and dt ~= 0 then
			self.dir.y = 1
		elseif action_id == hash("left") and dt ~= 0 then
			self.dir.x = -1
		elseif action_id == hash("right") and dt ~= 0 then
			self.dir.x = 1
		-- If it is attack
		elseif action_id == hash("attack") and dt ~= 0 then
			-- It sends a message to attack to itself
			msg.post(".", "play attack")
		-- If it is to switch weapons, it sends a message to itself to switch
		elseif action_id == hash("switch") and dt ~= 0 then
			-- Sends a message to itself to switch
			msg.post(".", "switch")
		-- If it is an interact input and the player is near an item
		elseif action_id == hash("interact") and self.in_item_range then
			-- Checks if the item is the exist cloud
			if self.itemNear == hash("/cloud-exit") then
				msg.post(".", "play_animation", {id = hash("away")})
				msg.post("/cloud-exit#cloudSprite", "picked_up")
				msg.post("/guis#victory_screen", "victory!")
			end
			-- Sets weaponAcquired to true
			weaponAcquired = true
			-- Checks if the item is the melee item and the player hasn't acquired one yet
			if self.itemNear == hash("/MeleeItem") and meleeWeaponAcquired == false then
				-- Resets itemNear
				self.itemNear = hash("")
				-- Sets the boolean to true
				meleeWeaponAcquired = true
				-- Sends a message to the weapon to tell it to destroy itself
				msg.post("/MeleeItem#item", "picked_up")
			-- Checks if the item is the ranged item and the player hasn't acquired one yet
			elseif self.itemNear == hash("/RangedItem") and rangedWeaponAcquired == false then
				-- Resets itemNear
				self.itemNear = hash("")
				-- Sets the boolean to true
				rangedWeaponAcquired = true
				-- Sends a message to the weapon to tell it to destroy itself
				msg.post("/RangedItem#item", "picked_up")
				-- Sets the attackMelee to false so it defaults to this new weapon
				if attackMelee then
					attackMelee = false
				end
			elseif self.itemNear == hash("/exit_cloud") then
				msg.post("/exit_cloud#cloudSprite", "picked_up")

			elseif self.itemNear == self.key2id then
			-- Checks if the item is the first key
			elseif self.itemNear == self.key1id then
				-- Resets itemNear
				self.itemNear = hash("")
				-- Increments the key variable
				self.keys = self.keys + 1
				-- Informs key object it has been picked up
				msg.post(self.key1id, "picked_up")
			-- Checks if the item is the second key
			elseif self.itemNear == self.key2id then
				-- Resets itemNear
				self.itemNear = hash("")
				-- Increments the key variable
				self.keys = self.keys + 1
				-- Informs key object it has been picked up
				msg.post(self.key2id, "picked_up")
			end
		end
	end
end
