local speed = 300
local attacking = false
local anim = nil
local attackMelee = true
local weaponSwitchTimer = 0
local attackingTimer = 0

function init(self)
	msg.post(".", "acquire_input_focus")
	self.dir = vmath.vector3()
	self.current_anim = nil
	self.firing = false
	self.health = 5
	self.damage_cooldown = 0
	self.damaged = false
	self.knocked_back = false
	self.knockback_cooldown = 0
	self.current_location = "outside" -- todo: will be used to help determine what walking sound to use
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.damage_cooldown > 0 then
		self.damage_cooldown = self.damage_cooldown - 1
	elseif self.damaged == true then
		self.damaged = false
	end
	
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end

	if weaponSwitchTimer ~= 0 then
		weaponSwitchTimer = weaponSwitchTimer - 1
	end

	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = { dir = self.dir }
		factory.create("#rocketfactory", nil, rot, props)
		self.firing = false
	end

	if not attacking then
		local p = go.get_position()
		go.set_position(p + self.dir * speed * dt) 

		-- counts down knockback if it's still going, if timer hits 0 then exit knockback state
		if self.knockback_cooldown > 0 then
			self.knockback_cooldown = self.knockback_cooldown - 1
		elseif self.knocked_back == true then
			self.knocked_back = false
		end

		local anim = hash("idle")

		-- TODO: DAMAGED STATE OVERRIDES DIRECTIONS. BY DESIGN AS PLACEHOLDER. 
		if self.damaged == true then
			anim = hash("damaged")
		elseif self.dir.x > 0 then  
			anim = hash("run_right")
		elseif self.dir.x < 0 then
			anim = hash("run_left")
		elseif self.dir.y > 0 then
			anim = hash("run_up")
		elseif self.dir.y < 0 then
			anim = hash("run_down")
		end

		if self.dir ~= vmath.vector3() and self.current_anim == hash("idle") then -- if the player is about to start moving
			sound.play("#walking") -- play walking noises
		end

		if anim ~= self.current_anim then                          -- [3]
			msg.post("#sprite", "play_animation", { id = anim })   -- [4]
			self.current_anim = anim                               -- [5]
			if anim == hash("idle") then -- used to detect if player is going idle, turns off walking noises
				sound.stop("#walking")
			end
		end

		-- resets movement vector to 0,0,0 unless player is still being knocked back
		if not self.knocked_back then
			self.dir = vmath.vector3() 
		end 

	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("play attack") then
		if not attacking then
			anim = self.current_anim
			if attackMelee then
				if anim == hash("run_right") then
					msg.post(".", "play_animation", {id = hash("melee_right")})
				elseif anim == hash("run_left") then
					msg.post(".", "play_animation", {id = hash("melee_left")})
				elseif anim == hash("run_up") then
					msg.post(".", "play_animation", {id = hash("melee_up")})
				elseif anim == hash("run_down") then
					msg.post(".", "play_animation", {id = hash("melee_down")})
				elseif anim == hash("idle") then
					msg.post(".", "play_animation", {id = hash("melee_down")})
				end
			else
				if anim == hash("run_right") then
					msg.post(".", "play_animation", {id = hash("ranged_right")})
					self.firing = true
				elseif anim == hash("run_left") then
					msg.post(".", "play_animation", {id = hash("ranged_left")})
					self.firing = true
				elseif anim == hash("run_up") then
					msg.post(".", "play_animation", {id = hash("ranged_up")})
					self.firing = true
				elseif anim == hash("run_down") then
					msg.post(".", "play_animation", {id = hash("ranged_down")})
					self.firing = true
				elseif anim == hash("idle") then
					msg.post(".", "play_animation", {id = hash("melee_down")})
					self.firing = true
				end
			end
			attacking = true
		end
	end
	if message_id == hash("animation_done") then
		attacking = false
		msg.post("#sprite", "play_animation", { id = anim })
	end
	if message_id == hash("switch") then
		print(weaponSwitchTimer)
		if weaponSwitchTimer == 0 then
			weaponSwitchTimer = 100
			attackMelee = not attackMelee
			print("Weapon Switched")
		end
	end

	-- if message is an attack collision and the player is not in the cooldown state...
	if message_id == hash("contact_point_response") and self.damage_cooldown == 0 and (message.other_group == hash("enemy_body") or message.other_group == hash("enemy_attack")) then
		on_damage(self, message.normal)
	end
end

-- happens when player collides with an object with group 'enemy_body' (todo: if enemies hit in ways other than melee, add group 'enemy_attack')
function on_damage(self, given_normal)
	-- play damage sound effect
	sound.play("#on_hurt")
	-- take away 1 hp
	self.health = self.health - 1
	-- if  hp at 0, kill player
	if self.health == 0 then
		on_death(self)
	else
		-- send message to gui to remove heart, activate damage cooldown
		msg.post("Level:/health_gui#player_health", "lost_health")
		self.damaged = true
		self.damage_cooldown = 120
		self.knocked_back = true
		self.dir = given_normal
		self.knockback_cooldown = 60
	end
end

function on_death(self)
	-- removes control from player
	msg.post(".", "release_input_focus")
	print("you died!")
	go.delete()
	-- TODO: death screen
end

function on_input(self, action_id, action)
	-- if in knockback state then take no user input
	if not self.knocked_back then
		if action_id == hash("down") then                        -- [1]
			self.dir.y = -1
		elseif action_id == hash("up") then
			self.dir.y = 1
		elseif action_id == hash("left") then                     -- [2]
			self.dir.x = -1
		elseif action_id == hash("right") then
			self.dir.x = 1
		elseif action_id == hash("attack") then
			msg.post(".", "play attack")
		elseif action_id == hash("switch") then
			msg.post(".", "switch")
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
