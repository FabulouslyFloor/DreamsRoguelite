go.property("local_pos", 0)
go.property("bool", 0)
-- draws in values from factory and uses them to set these values
-- self.local_pos sets enemy to being partially through the movement animation so it's not perfectly centered every time
-- can be up to 15% off center to the left or right
-- self.bool randomly sets worm to be facing + moving left or right on initialization

local function update_animation(self)
	if self.go_left then
		sprite.play_flipbook("#sprite", "left")
	else
		sprite.play_flipbook("#sprite", "right")
	end
end

local function knockback(self, normal)
	print(normal)
	-- sets knockback state
	self.knockbacked = true
	-- Gets direction vector from intersection and sets the direction to it
	self.dir = normal
	-- sets knockback timer to appropriate length
	self.kbtimer = 45
end

local function damage(self)
	-- take away 1 hp
	self.health = self.health - 1
	-- if  hp at 0, delete object
	if self.health == 0 then
		go.delete()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") and message.own_group == hash("enemy_body") then
		-- Calls damage; TODO: currently not implemented, has only one hp
		-- damage(self)
		-- Calls knockback with special vector from this message
		knockback(self, message.normal)
		
	elseif message_id == hash("trigger_response") then
		damage(self)

	elseif message_id == hash("contact_point_response") and (message.other_group == hash("walls") or message.other_group == hash("enemy_walls")) then
		local pos = go.get_position()
		local to = pos + message.normal * 5
		go.set_position(to)

		-- Update animation
		update_animation(self)
	end
end

function init(self)
	self.speed = 50
	self.range = 500
	self.health = 5
	if self.bool == 0 then
		self.go_left = false
		self.dir = vmath.vector3(1,0,0)
	else
		self.go_left = true
		self.dir = vmath.vector3(-1,0,0)
	end
	self.knockbacked = false
	self.kbtimer = 0
	-- called to set animation according to established direction
	update_animation(self)
end

function update(self, dt)
	if self.knockbacked then
		local current_position = go.get_position()
		go.set_position(current_position + self.dir * self.speed * dt) 
		self.kbtimer = self.kbtimer - 1
		if self.kbtimer == 0 then
			self.knockbacked = false
			if self.go_left then
				self.dir = vmath.vector3(-1,0,0)
			else
				self.dir = vmath.vector3(1,0,0)
			end
		end
	else 
		local pos = go.get_position()
		-- if set position to appropriate for direction
		if self.go_left then
			pos = pos + (self.dir * self.speed * dt)
			go.set_position(pos)
			self.local_pos = self.local_pos - 1 -- [L_P] tracks progress through left-to-right motion; used below
		else
			pos = pos + (self.dir * self.speed * dt)
			go.set_position(pos)
			self.local_pos = self.local_pos + 1 -- [L_P] ditto above
		end

		-- if enemy is at limits of range, positive or negative...
		if self.local_pos > self.range or self.local_pos < (self.range * -1) then
			-- toggle go_left and reset direction vector appropriately
			self.go_left = not self.go_left
			if self.dir == vmath.vector3(-1,0,0) then
				self.dir = vmath.vector3(1,0,0)
			else
				self.dir = vmath.vector3(-1,0,0)
			end
			-- called to update animation for new direction
			update_animation(self)
		end
	end
end