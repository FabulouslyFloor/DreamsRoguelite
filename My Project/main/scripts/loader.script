local function show(self, proxy)
	if self.current_proxy then 
		-- Sends message to unload curreny scene (handled by defold)
		msg.post(self.current_proxy, "unload") 
		-- Sets current proxy to nothing
		self.current_proxy = nil
	end
	-- Sends message to the passed proxy to load itself.
	msg.post(proxy, "async_load")
end

-- When function loads
function init(self)
	-- Gets focus
	msg.post(".", "acquire_input_focus") 
	-- Sets current proxy to nil
	self.current_proxy = nil 
	-- Sends a message to show the opening 
	msg.post("#", "show_opening") 
end

-- Handles messages recieved
function on_message(self, message_id, message, sender)
	-- If it recieves a call to display the World Select scene
	if message_id == hash("show_World_Select") then
		show(self, "#world select")
	-- If it recieves a call to display a playable level
	elseif message_id == hash("show_Level") then
		show(self,"#level")
	-- If it recieves a call to load the proxy
	elseif message_id == hash("proxy_loaded") then
		self.current_proxy = sender 
		msg.post(sender, "enable")
	-- If it recieves a call to unload a proxy
	elseif message_id == hash("proxy_unloaded") then
		print("Unloaded", sender)
	end
end








function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end