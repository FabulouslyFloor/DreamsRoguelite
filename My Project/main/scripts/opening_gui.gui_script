--[[

Opening GUI Script File

Controls opening splash screen and start/quit buttons

]]--

BYPASS_SPLASH = false 		-- turn off display of opening splash screen

local function complete_splash()
	print("Executing complete_splash")
	gui.set_enabled(self.start_button, true)
	gui.set_enabled(self.exit_button, true)
	msg.post("/controllers#Opening", "splash_complete")
end

local function show_exit_button(self)
	print("Executing show_exit_button")
	local d = 1.5

	local to_color = gui.get_color(self.start_button)
	
	gui.animate(self.exit_button, gui.PROP_COLOR, to_color, gui.EASING_IN, .5, d, complete_splash)

end

local function show_start_button(self)
	print("Executing show_start_button")
	local d = 1.5
	
	local to_color = gui.get_color(self.start_button)

	gui.animate(self.start_button, gui.PROP_COLOR, to_color, gui.EASING_IN, .5, d, show_exit_button)
end

local function show_background(self)
	print("Executing show_background")
	local d = .75

	local to_color = gui.get_color(self.background)

	gui.animate(self.background, gui.PROP_COLOR, to_color, gui.EASING_IN, 1, d, show_start_button)
end

local function hide_logo(self)
	print("Executing hide_logo")
	local d = 0.75

	gui.animate(self.logo, gui.PROP_COLOR, 0, gui.EASING_IN, 3, d, show_background)

end

local function show_logo(self)
	print("Executing show_logo")
	local d = 1.5 		-- time delay

	local to_color = gui.get_color(self.logo)

	gui.animate(self.logo, gui.PROP_COLOR, to_color, gui.EASING_IN, 1.5, d, hide_logo)

end

local button_clicked = false -- No redundant clicks

function init(self)
	msg.post(".", "acquire_input_focus")

	-- Gotta get all the nodes to animate them
	self.logo = gui.get_node("logo")
	self.background = gui.get_node("background")
	self.start_button = gui.get_node("start_button")
	self.exit_button = gui.get_node("exit_button")

	-- No clicks during the splash screen!!
	gui.set_enabled(self.start_button, false)
	gui.set_enabled(self.exit_button, false)

	-- Bypass the splash screen for debugging
	if BYPASS_SPLASH == false then
		show_logo(self)
	elseif BYPASS_SPLASH == true then
		msg.post("/controllers#Opening", "splash_complete")
	end
end

function on_input(self, action_id, action)
	-- Continue from here
	if action.pressed and gui.pick_node(gui.get_node("start_button"), action.x, action.y) and button_clicked == false then
		gui.play_flipbook(self.start_button, hash("cloud-button-pushed"))
	end
	if action.pressed and gui.pick_node(gui.get_node("exit_button"), action.x, action.y) and button_clicked == false then
		gui.play_flipbook(self.start_button, hash("cloud-button-pushed"))
	end

	if action.released and gui.pick_node(gui.get_node("start_button"), action.x, action.y) then
		gui.play_flipbook(self.start_button, hash("cloud-button-unpushed"))

		if button_clicked == false then
			button_clicked = true
			msg.post("Scenes:/controller#loader","show_World_Select") -- open world select scene
		end
	end

	if action.released and gui.pick_node(gui.get_node("exit_button"), action.x, action.y) then
		gui.play_flipbook(self.start_button, hash("cloud-button-unpushed"))

		if button_clicked == false then
			button_clicked = true
			msg.post("@system", "exit", {code = 0}) -- exit program
		end
	end
	
end	

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end