 -- Sets up the object to accept the direction passed to it
go.property("dir", hash(""))

function init(self)
	-- Sets up local variables
	self.speed = 0
	self.life = 2

	msg.post("#explosion", "disable")
	
	if self.dir == hash("up") then
		msg.post(".", "play_animation", {id = hash("ranged_up")})
		self.speed = 7
	elseif self.dir == hash("down") then
		msg.post(".", "play_animation", {id = hash("ranged_down")})
		self.speed = -7
	elseif self.dir == hash("right") then
		msg.post(".", "play_animation", {id = hash("ranged_right")})
		self.speed = 7
	elseif self.dir == hash("left") then
		msg.post(".", "play_animation", {id = hash("ranged_left")})
		self.speed = -7
	end
end

local function explode(self)
	msg.post("#sprite", "disable")
	msg.post("#explosion", "enable")
	-- Sets the life really high so it doesn't trigger again
	self.life = 1000
	-- Stops moving
	go.set_rotation(vmath.quat())
	self.speed = 0
	-- Plays the explosion animation
	sprite.play_flipbook("#explosion", "explosion")       
end

function update(self, dt)
	-- Moves itself forward
	local pos = go.get_position()
	if self.dir == hash("up") or self.dir == hash("down") then
		pos.y = pos.y + self.speed
		go.set_position(pos)
	elseif self.dir == hash("right") or self.dir == hash("left") then
		pos.x = pos.x + self.speed
		go.set_position(pos)
	end

	-- Decrement life
	self.life = self.life - dt
	-- If life is below zero, trigger explosion
	if self.life < 0 then
		explode(self)
	end
end

function on_message(self, message_id, message, sender)
	-- When the explosion animation finishes, it deletes itself
	if message_id == hash("animation_done") then
		go.delete()
	-- if the rocket collides with an enemy, it triggers the explosion and deletes the other enemy.
	elseif message_id == hash("collision_response") then
		--explode(self)
		--go.delete(message.other_id)
		go.delete()
	end
	if message_id == hash("trigger_response") and message.enter then
		msg.post(message.other_id, "hit")
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end